<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Evert&#39;s Blog</title>
  
  <subtitle>Projects and Tutorials</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lunasqu.ee/blog/"/>
  <updated>2019-02-23T21:17:18.777Z</updated>
  <id>https://lunasqu.ee/blog/</id>
  
  <author>
    <name>Evert</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Self-hosting, Part 1</title>
    <link href="https://lunasqu.ee/blog/2019/02/23/Self-hosting-part-1/"/>
    <id>https://lunasqu.ee/blog/2019/02/23/Self-hosting-part-1/</id>
    <published>2019-02-23T21:17:18.000Z</published>
    <updated>2019-02-23T21:17:18.777Z</updated>
    
    <content type="html"><![CDATA[<p>Today I will be describing to you my experiences with self-hosting and how you can get started as well.</p><p>I’m not going to go into detail in this article about how to install and configure anything, but the websites for respective pieces of software have great documentation and you can always look for more information online. Followup blog posts may come in the future describing setups that I’ve created.</p><h2 id="1-Hardware"><a href="#1-Hardware" class="headerlink" title="1. Hardware"></a>1. Hardware</h2><p>Believe it or not, you don’t actually need a server computer to host your websites, email or other networked software. You can use pretty much any old computer to do what you want. I know a guy who uses a laptop without a screen as a server, and quite successfully so. Your server could be anything, from an old Android phone to a router to an actual server computer, just as long as you have it connected to a network.</p><p>I have personally been using <a href="https://www.raspberrypi.org/" target="_blank" rel="noopener">Raspberry Pi</a> computers for my personal servers. What you might learn the hard way, though, that you really don’t want to do many write operations on a simple SD card, instead, I recommend getting a 2.5” Hard Disk Drive or a even a Solid State Drive with a simple USB to SATA converter, which you can get cheap off <a href="https://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=m570.l1313&amp;_nkw=usb+to+sata&amp;_sacat=0" target="_blank" rel="noopener">eBay</a> or <a href="https://www.aliexpress.com/wholesale?SearchText=usb+to+sata" target="_blank" rel="noopener">AliExpress</a>. I’ve had quite a few corrupted SD cards on my Raspberry Pi’s due to high amount of concurrent writes.</p><h3 id="1-1-Hosting-services"><a href="#1-1-Hosting-services" class="headerlink" title="1.1. Hosting services"></a>1.1. Hosting services</h3><p>For most of the heavy-lifting, though, I recommend using Virtual Private Servers for online services. I use a 10€/month cloud server from <a href="https://www.hetzner.com/cloud" target="_blank" rel="noopener">Hetzner</a> to host most of my websites, databases and email. I can only really recommend Hetzner and <a href="https://www.ovh.com/" target="_blank" rel="noopener">OVH</a> because I’ve had the best experiences with them, but you can search around the web for VPS hosting. Be sure to look at reviews and make sure to read the Terms of Service notices!</p><p>If you have more money to spend, you can also look for hosted dedicated servers.</p><p>With hosting services, you also avoid the problem of having to expose your IP address or open ports on your local network. If you don’t like your IP address being public or you simply are unable to open ports on your network, I strongly recommend that you get a low cost virtual private server instead of any local computer.</p><h2 id="2-Operating-System"><a href="#2-Operating-System" class="headerlink" title="2. Operating System"></a>2. Operating System</h2><p>What you’re looking for here is an operating system based on the <a href="https://en.wikipedia.org/wiki/Linux_kernel" target="_blank" rel="noopener">Linux kernel</a>. I can recommend <a href="https://www.debian.org/intro/about" target="_blank" rel="noopener">Debian</a>, <a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a> and <a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a>. Linux systems are (mostly, there are paid enterprise solutions) completely free, in every sense of the word, and open source.</p><p>If you run into any issues with Linux systems, or just want to know how to configure or use a certain program, an absolutely wonderful online resource is the <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">Arch Linux Wiki</a>, and you don’t even have to use Arch Linux in order for it to be useful to you.</p><h2 id="3-Software"><a href="#3-Software" class="headerlink" title="3. Software"></a>3. Software</h2><p>There’s <em>a lot</em> of things you can run on your own server computer, so in this section, I’m going to tell you about some of the more common and more useful services.</p><h3 id="3-1-Website-hosting"><a href="#3-1-Website-hosting" class="headerlink" title="3.1. Website hosting"></a>3.1. Website hosting</h3><p>Of course everybody wants to have a website. What would a self-hosted server be without a website?</p><p>The first thing you need in order to run a website is a web server. For beginners and simple setups, the most popular choice is the <a href="https://httpd.apache.org/" target="_blank" rel="noopener">Apache HTTP Server</a>, however for more versatility and better (in my opinion) configuration and proxying, I recommend <a href="http://nginx.org/" target="_blank" rel="noopener">nginx</a> as well.</p><p>For the actual content of the website, you also have <em>a lot</em> of options. A very good and popular free platform you can use is <a href="https://wordpress.org/" target="_blank" rel="noopener">WordPress</a>. Of course, there’s the possibility of writing a website yourself, either in PHP and HTML or just HTML and CSS.</p><h3 id="3-2-Private-File-Cloud"><a href="#3-2-Private-File-Cloud" class="headerlink" title="3.2. Private File Cloud"></a>3.2. Private File Cloud</h3><p>If you’re like me and don’t like having your files on <strong>someone else’s computer</strong>, hosting a “file cloud” yourself is a good bet. The best software to do this (by far) is <a href="https://nextcloud.com/" target="_blank" rel="noopener">NextCloud</a>. It allows you to easily synchronize files between your computers and mobile phones and you always know that your files are safe in your own hands.</p><p>Be warned though, this application server takes a good chunk of your computer resources, so you might need something more powerful than a Raspberry Pi for this one.</p><h4 id="3-2-1-Online-Documents"><a href="#3-2-1-Online-Documents" class="headerlink" title="3.2.1. Online Documents"></a>3.2.1. Online Documents</h4><p>NextCloud can very easily help you transfer documents between your devices, but there’s also the option to integrate an Office platform, such as <a href="https://nextcloud.com/collaboraonline/" target="_blank" rel="noopener">Collabora Online</a>, which allows you to view and edit your Office documents on the go, just like Google Docs or Office 356 Online, but you’re in control!</p><p>Be warned again, these applications are also a significant load on your server.</p><h3 id="3-3-Mail-Server"><a href="#3-3-Mail-Server" class="headerlink" title="3.3. Mail Server"></a>3.3. Mail Server</h3><p>Okay, so you’ve got it in your head that you also want to host a mail server for yourself, but let me stop you right there. Setting up a mail server is <strong>a really tedious and time consuming task</strong> and you’ll probably end up giving up and using Gmail or Outlook in the end anyway. A misconfigured email server could also do a lot of harm, so please be careful with what you configure and always read the documentation if you really do plan on hosting your own mail server.</p><p>If that didn’t scare you, you may proceed. Just know that you should <strong>NEVER</strong> host an open email relay unless you really know what you’re doing.</p><h4 id="3-3-1-Mail-Transfer-Agent-MTA"><a href="#3-3-1-Mail-Transfer-Agent-MTA" class="headerlink" title="3.3.1. Mail Transfer Agent (MTA)"></a>3.3.1. Mail Transfer Agent (MTA)</h4><p>The MTA is the program used to send emails. It does not necessarily let you read/manage inboxes on its own.</p><p>One of the more popular MTAs, and the one I use, is <a href="http://www.postfix.org/" target="_blank" rel="noopener">Postfix</a>. Creating the perfect configuration to meet your needs is, again, a tedious task. You can look for example configurations online and try them out yourself.</p><h4 id="3-3-2-Mail-access-IMAP-POP3"><a href="#3-3-2-Mail-access-IMAP-POP3" class="headerlink" title="3.3.2. Mail access (IMAP, POP3)"></a>3.3.2. Mail access (IMAP, POP3)</h4><p>This is the application that actually allows you to access and store your emails on your server.</p><p>The most popular software for this is <a href="https://www.dovecot.org/" target="_blank" rel="noopener">Dovecot</a>. Dovecot is really good at doing what it does and it allows you to set up mailboxes and can even do message sorting (<a href="https://wiki2.dovecot.org/Pigeonhole" target="_blank" rel="noopener">pigeonhole</a> sieve).</p><h4 id="3-3-3-Mail-filtering"><a href="#3-3-3-Mail-filtering" class="headerlink" title="3.3.3. Mail filtering"></a>3.3.3. Mail filtering</h4><p>Mail filtering is what you would use to combat spam.</p><p>A great free software for combating spam is <a href="https://spamassassin.apache.org/" target="_blank" rel="noopener">SpamAssassin</a> and you can use <a href="https://www.clamav.net/" target="_blank" rel="noopener">ClamAV</a> to detect viruses in incoming mail.</p><h3 id="3-4-Database"><a href="#3-4-Database" class="headerlink" title="3.4. Database"></a>3.4. Database</h3><p>If you need a database, your own server is also a good place for that. For SQL databases, I recommend using <a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>. For NoSQL, you could use <a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB</a>. You’ll need a MariaDB database if you’re going to host WordPress on your server.</p><h2 id="4-Communication"><a href="#4-Communication" class="headerlink" title="4. Communication"></a>4. Communication</h2><p>Communication is an important part of society. Did you know that there are free and open source solutions that you can put on your own server that allows you to communicate with your friends? Here are some that I have personally come in contact with and can recommend.</p><p><strong>1. An aging, historical solution: IRC</strong><br>IRC (Internet Relay Chat) is an old text-based protocol used in ages old chat rooms. Believe it or not, it is still used to this day. IRC is a quick and easy way to communicate in text. A popular IRC server application is <a href="http://www.inspircd.org/" target="_blank" rel="noopener">inspIRCd</a>.</p><p>I personally still host an IRC server for me and my friends.</p><p><strong>2. Purely for voice chatting: Mumble</strong><br><a href="https://wiki.mumble.info/wiki/Main_Page" target="_blank" rel="noopener">Mumble</a> is a free and open source low latency voice chatting application. In order to host your own server for Mumble, you need <a href="https://wiki.mumble.info/wiki/Running_Murmur" target="_blank" rel="noopener">Murmur</a> (mumble-server).</p><p><strong>3. Up-and-coming communication standard: Matrix</strong><br><a href="https://matrix.org/blog/home/" target="_blank" rel="noopener">Matrix</a> is a free and open source decentralized communication protocol. Anyone can host a server (called a homeserver) and people from different servers are able to communicate with each-other. The current go-to homeserver solution is <a href="https://matrix.org/docs/guides/installing-synapse" target="_blank" rel="noopener">Synapse</a>, however more options are coming in the future.</p><p>As a disclaimer I’d like to say that Synapse is a large application and it might not be plausible for you to host it on your machine.</p><p><strong>4. Simple and modern: Rocket.Chat</strong><br><a href="https://rocket.chat/" target="_blank" rel="noopener">Rocket.Chat</a> is a free and open source communication platform aimed for teams. Despite being aimed for teams, it’s also a great solution for chatting with your friends. It allows you to create rooms and also provides end-to-end encryption for messages.</p><p>I’ve personally hosted a Rocket.Chat instance and can say that it is a good platform, however me and my buddies are old-school and like our IRC server more.</p><h3 id="4-1-Your-own-social-network"><a href="#4-1-Your-own-social-network" class="headerlink" title="4.1. Your own social network!"></a>4.1. Your own social network!</h3><p>Have you ever thought about running a Twitter-like platform that you had full control over? Well, now you can! With <a href="https://joinmastodon.org/" target="_blank" rel="noopener">Mastodon</a>, you can create your own social networking platform, called an instance. Instances are joined together in a global federated network called the <a href="https://en.wikipedia.org/wiki/Fediverse" target="_blank" rel="noopener">Fediverse</a>, which allows you to communicate with anyone on any Mastodon (or other platform on the Fediverse) server without making multiple accounts.</p><h2 id="Conculsion-for-now"><a href="#Conculsion-for-now" class="headerlink" title="Conculsion, for now.."></a>Conculsion, for now..</h2><p>There’s a lot of things you can do with your own server. Hopefully this blog post was of any use to you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I will be describing to you my experiences with self-hosting and how you can get started as well.&lt;/p&gt;
&lt;p&gt;I’m not going to go into d
      
    
    </summary>
    
    
      <category term="linux" scheme="https://lunasqu.ee/blog/tags/linux/"/>
    
      <category term="tutorial" scheme="https://lunasqu.ee/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>How to install Arch Linux</title>
    <link href="https://lunasqu.ee/blog/2018/03/15/How-to-install-Arch-Linux/"/>
    <id>https://lunasqu.ee/blog/2018/03/15/How-to-install-Arch-Linux/</id>
    <published>2018-03-15T15:21:22.000Z</published>
    <updated>2018-08-25T08:31:43.443Z</updated>
    
    <content type="html"><![CDATA[<p>Today I’m going to instruct you through the steps of installing your own Arch Linux system.</p><h2 id="Download-the-ISO"><a href="#Download-the-ISO" class="headerlink" title="Download the ISO"></a>Download the ISO</h2><p>You can find the <a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">downloads for Arch Linux by clicking here</a>.</p><h2 id="1-Partition-the-drive"><a href="#1-Partition-the-drive" class="headerlink" title="1. Partition the drive"></a>1. Partition the drive</h2><p>Determine your drive name by running <code>lsblk</code>. Run the following command to start the partitioning (with <code>/dev/sda</code> replaced by your drive):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># fdisk /dev/sda</span><br></pre></td></tr></table></figure><ol><li>Enter <code>n</code> to create a new partition.</li><li>Press Enter on the following prompts to accept the defaults.</li><li>Enter <code>w</code> to write your changes to the disk.</li></ol><h2 id="2-Create-the-File-System-and-mount-it"><a href="#2-Create-the-File-System-and-mount-it" class="headerlink" title="2. Create the File System and mount it"></a>2. Create the File System and mount it</h2><p>Next, you need to create a filesystem on the partition that you’ve made. After you’ve created the filesystem, you can mount it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkfs.ext4 /dev/sda1</span><br><span class="line"># mount -t ext4 /dev/sda1 /mnt</span><br></pre></td></tr></table></figure><h2 id="3-Install-Arch-Linux-system"><a href="#3-Install-Arch-Linux-system" class="headerlink" title="3. Install Arch Linux system"></a>3. Install Arch Linux system</h2><p>This is maybe the most important step in the progress. This is the step where you are actually installing the system. For that, you need to run <code>pacstrap</code> followed by the packages you want to install. In this case, we’ll install <code>base</code> and <code>grub</code> for the bootloader.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacstrap -i /mnt base grub</span><br></pre></td></tr></table></figure><h2 id="4-Generate-File-System-Tab"><a href="#4-Generate-File-System-Tab" class="headerlink" title="4. Generate File System Tab"></a>4. Generate File System Tab</h2><p>The file <code>fstab</code> contains descriptive information about the filesystems the system can mount.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure><h2 id="5-Enter-the-system-via-chroot"><a href="#5-Enter-the-system-via-chroot" class="headerlink" title="5. Enter the system via chroot"></a>5. Enter the system via <code>chroot</code></h2><p>Now, we’re ready to set up the system by going inside it. For this, we’ll be running <code>arch-chroot</code>. <strong>Do NOT reboot at this stage!</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure><h2 id="6-Setting-up-locales"><a href="#6-Setting-up-locales" class="headerlink" title="6. Setting up locales"></a>6. Setting up locales</h2><p>Locales are basically the language files your system will be using.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># nano /etc/locale.gen</span><br><span class="line">   Uncomment line en_US.UTF-8 UTF-8</span><br><span class="line">   Uncomment line en_US ISO-8859-1</span><br></pre></td></tr></table></figure></p><p>(uncomment by removing the <code>#</code> in front)</p><p>After that, you have to generate the locale files.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># locale-gen</span><br></pre></td></tr></table></figure></p><p>And then put them into effect on the system.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br><span class="line"># export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h2 id="7-Setting-the-timezone"><a href="#7-Setting-the-timezone" class="headerlink" title="7. Setting the timezone"></a>7. Setting the timezone</h2><p>All timezone files can be found in <code>/usr/share/zoneinfo/</code>. You need to create a link to <code>/etc/localtime</code> with the timezone you want.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /usr/share/zoneinfo/LOCATION/CITY /etc/localtime</span><br></pre></td></tr></table></figure><h2 id="8-Set-the-hardware-clock"><a href="#8-Set-the-hardware-clock" class="headerlink" title="8. Set the hardware clock"></a>8. Set the hardware clock</h2><p>This command sets the hardware clock from system time. <code>--utc</code> implies that your hardware clock is in the UTC timezone. More information <a href="https://wiki.archlinux.org/index.php/Time#Hardware_clock" target="_blank" rel="noopener">here</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hwclock --systohc --utc</span><br></pre></td></tr></table></figure><h2 id="9-Set-your-system’s-hostname"><a href="#9-Set-your-system’s-hostname" class="headerlink" title="9. Set your system’s hostname"></a>9. Set your system’s hostname</h2><p>This can be anything you want.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># echo &quot;my-computer&quot; &gt; /etc/hostname</span><br></pre></td></tr></table></figure><h2 id="10-Set-up-simple-networking"><a href="#10-Set-up-simple-networking" class="headerlink" title="10. Set up simple networking"></a>10. Set up simple networking</h2><p>Before you do the following, please run <code>ip a</code> to determine your interface. It’s generally called <code>eth0</code>, but it may be different on some machines.</p><ol><li><p>Copy the example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cp /etc/netctl/examples/ethernet-dhcp /etc/netctl/my_network</span><br></pre></td></tr></table></figure></li><li><p>Modify the interface name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># nano /etc/netctl/my_network</span><br><span class="line">   Replace the &quot;Interface=eth0&quot; line with the one shown by the &quot;ip a&quot; command.</span><br></pre></td></tr></table></figure></li><li><p>Enable the network</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># netctl enable my_network</span><br></pre></td></tr></table></figure></li></ol><h2 id="11-Set-the-root-password-recommended"><a href="#11-Set-the-root-password-recommended" class="headerlink" title="11. Set the root password (recommended)"></a>11. Set the root password (recommended)</h2><p>Setting a password on your root user is highly recommended. You can do that now by running <code>passwd</code></p><h2 id="12-Install-the-boot-loader-grub"><a href="#12-Install-the-boot-loader-grub" class="headerlink" title="12. Install the boot loader (grub)"></a>12. Install the boot loader (<code>grub</code>)</h2><p>You can find information on how to install GRUB on various systems on the <a href="https://wiki.archlinux.org/index.php/GRUB" target="_blank" rel="noopener">Arch Linux Wiki</a>. The following is a simple installation on a system with a <strong>BIOS</strong> (not <strong>UEFI</strong>). You can find more boot loaders <a href="https://wiki.archlinux.org/index.php/Category:Boot_loaders" target="_blank" rel="noopener">here</a>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># grub-install --recheck /dev/sda</span><br><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><h2 id="13-Reboot-the-machine"><a href="#13-Reboot-the-machine" class="headerlink" title="13. Reboot the machine"></a>13. Reboot the machine</h2><p>You are now ready to boot into your new system.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># exit</span><br><span class="line"># umount /mnt</span><br><span class="line"># shutdown</span><br></pre></td></tr></table></figure></p><p>After shutting down, remove the disk image and boot the system again. <strong>You can now use your newly installed system!</strong></p><h1 id="More-things-to-do"><a href="#More-things-to-do" class="headerlink" title="More things to do"></a>More things to do</h1><h2 id="Creating-an-user-account"><a href="#Creating-an-user-account" class="headerlink" title="Creating an user account"></a>Creating an user account</h2><p>The first user you create should also be added to the <code>wheel</code> group. This will be kind of like an administrator.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># useradd -m -G wheel -s /bin/bash usernamehere</span><br><span class="line"># passwd usernamehere</span><br></pre></td></tr></table></figure><p>For creating other users, you should omit the <code>-G wheel</code> part unless you want them to be able to use <code>sudo</code>.</p><h3 id="Enabling-sudo"><a href="#Enabling-sudo" class="headerlink" title="Enabling sudo"></a>Enabling <code>sudo</code></h3><ol><li>Install sudo - <code># pacman -S sudo</code></li><li>Create a file in <code>/etc/sudoers.d/99-wheel</code> with the following lines:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure></li></ol><p>If you want the <code>wheel</code> group to be able to use sudo without password, you can replace the last <code>ALL</code> with <code>NOPASSWD: ALL</code>.</p><h2 id="Installing-a-Desktop-Environment"><a href="#Installing-a-Desktop-Environment" class="headerlink" title="Installing a Desktop Environment"></a>Installing a Desktop Environment</h2><p>Firstly, you should install <code>xorg</code> packages.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S xorg-server xorg-xinit xorg-server-utils mesa xterm</span><br></pre></td></tr></table></figure></p><p>For graphics drivers, you can look at the wiki: <a href="https://wiki.archlinux.org/index.php/Intel_graphics" target="_blank" rel="noopener">Intel</a>, <a href="https://wiki.archlinux.org/index.php/ATI" target="_blank" rel="noopener">ATI</a>, <a href="https://wiki.archlinux.org/index.php/AMDGPU" target="_blank" rel="noopener">AMD</a> and <a href="https://wiki.archlinux.org/index.php/NVIDIA" target="_blank" rel="noopener">NVIDIA</a>.</p><p><strong>You can find packages for various desktop environments <a href="https://wiki.archlinux.org/index.php/Desktop_environment" target="_blank" rel="noopener">here</a>.</strong></p><h3 id="Install-lightdm"><a href="#Install-lightdm" class="headerlink" title="Install lightdm"></a>Install <code>lightdm</code></h3><p>Some desktop environments don’t have a system to log you in to a session. This is where <code>lightdm</code> comes to play.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S lightdm lightdm-gtk-greeter</span><br><span class="line"># systemctl enable lightdm.service</span><br></pre></td></tr></table></figure></p><p>You can find lightdm configuration at <code>/etc/lightdm/lightdm.conf</code>.</p><p>After you’ve installed what you want, you can reboot the system and it should either load up the desktop environment or the <code>lightdm-gtk-greeter</code>, which will allow you to select a desktop environment to log in to.</p><h2 id="Keeping-your-system-up-to-date"><a href="#Keeping-your-system-up-to-date" class="headerlink" title="Keeping your system up-to-date"></a>Keeping your system up-to-date</h2><p>You should keep your system up-to-date to get the latest packages and security patches. Arch Linux is a <strong>rolling release</strong> distribution, meaning that you don’t have to reinstall the entire system and package updates are rolled separately instead of in bundles.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -Syu</span><br></pre></td></tr></table></figure></p><p>This command synchronizes your system with the latest repositories and installs all available updates.</p><h1 id="That’s-it"><a href="#That’s-it" class="headerlink" title="That’s it!"></a>That’s it!</h1><p>This should be your basic Arch Linux system ready to go! Always remember that the <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">Arch Linux Wiki</a> is a great place to find help for all things Linux, not just Arch!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I’m going to instruct you through the steps of installing your own Arch Linux system.&lt;/p&gt;
&lt;h2 id=&quot;Download-the-ISO&quot;&gt;&lt;a href=&quot;#Downl
      
    
    </summary>
    
    
      <category term="linux" scheme="https://lunasqu.ee/blog/tags/linux/"/>
    
      <category term="tutorial" scheme="https://lunasqu.ee/blog/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Giving a shot at making a game using Godot Engine 3.0</title>
    <link href="https://lunasqu.ee/blog/2018/02/03/Giving-a-shot-at-making-a-game-using-Godot-Engine-3-0/"/>
    <id>https://lunasqu.ee/blog/2018/02/03/Giving-a-shot-at-making-a-game-using-Godot-Engine-3-0/</id>
    <published>2018-02-03T10:43:10.000Z</published>
    <updated>2018-08-25T08:31:43.423Z</updated>
    
    <content type="html"><![CDATA[<p>Hello!<br>In the past week, I’ve been working on a simple 3D game using <a href="https://godotengine.org/" target="_blank" rel="noopener">Godot Engine 3.0</a> (<em>go-doh</em>). In this article, I will show off some of the features and discuss how it all works. Here’s a quick demo of the gameplay:</p><p><video width="640" height="420" controls><br>  <source src="https://i.lunasqu.ee/blog/godot_project-2018-02-02_12.32.45.webm" type="video/webm"><br></video></p><h1 id="Mechanics"><a href="#Mechanics" class="headerlink" title="Mechanics"></a>Mechanics</h1><h2 id="Block-breaking"><a href="#Block-breaking" class="headerlink" title="Block breaking"></a>Block breaking</h2><p>Blocks can be broken by just clicking on a tile of the chunk. The speed of the breaking and the damage dealt to the tile depend on the current pickaxe. Pickaxes can be upgraded in the Shop GUI. Pickaxes also have a durability value, which will always be kept at maximum when you’re on the surface. The current pickaxe along with it’s durability is displayed in the bottom right corner of the screen. When your pickaxe “breaks”, you will stop mining and you won’t be able to start mining until you repair it or return to the surface.</p><h2 id="Bombing"><a href="#Bombing" class="headerlink" title="Bombing"></a>Bombing</h2><p>Blocks can also be broken using bombs. By placing a bomb, it takes approximately 3 seconds to detonate and it <strong>damages</strong> blocks in a 4 tile radius. Tougher blocks located deeper in the mine wont be broken by a bomb, instead made softer and thus they will take less time to mine with a pickaxe. When a bomb blows up tiles, you won’t get them in your inventory.</p><h2 id="Shop"><a href="#Shop" class="headerlink" title="Shop"></a>Shop</h2><p>In the shop GUI, you can sell your mined blocks for money or buy items like torches, bombs and better pickaxes. Money can only be earned by selling the blocks you’ve mined.</p><h2 id="Minerals"><a href="#Minerals" class="headerlink" title="Minerals"></a>Minerals</h2><p>This is the list of minerals currently generated in the chunk and their yield when sold:</p><ul><li>Copper - $15</li><li>Iron - $20</li><li>Silver - $50</li><li>Gold - $100</li><li>Amethyst - $250</li><li>Emerald - $300</li><li>Sapphire - $400</li><li>Ruby - $500</li><li>Diamond  - $1000</li><li>Flawless Diamond - $2500 (rarest)</li></ul><p>Note that all of these are not guaranteed to generate. It depends on the random seed and the y value.</p><h1 id="Scenes"><a href="#Scenes" class="headerlink" title="Scenes"></a>Scenes</h1><p>Godot uses Scenes, which can be easily instanced. The following image is the Godot editor, in it I have opened the root scene, which will be the point where the game runs.<br><img src="https://i.lunasqu.ee/blog/root_scene.png" alt="Root Scene"><br>On the right, you can see the scene tree.<br><img src="https://i.lunasqu.ee/blog/instances.png" alt="Instances"></p><ul><li><a href="http://docs.godotengine.org/en/3.0/classes/class_spatial.html" target="_blank" rel="noopener"><strong>Root</strong></a> - This is the first node in the scene, containing everything.</li><li><a href="http://docs.godotengine.org/en/3.0/classes/class_worldenvironment.html" target="_blank" rel="noopener"><strong>WorldEnvironment</strong></a> - Controls the overall look of the scene. I have configured it to give me a completely black scene without a background.</li><li>All of my other custom scenes follow these.</li></ul><h2 id="The-Chunk"><a href="#The-Chunk" class="headerlink" title="The Chunk"></a>The Chunk</h2><p><video width="640" height="420" controls><br>  <source src="https://i.lunasqu.ee/blog/godot_project-2018-02-03_14.12.37.webm" type="video/webm"><br></video><br>The Chunk is a <a href="http://docs.godotengine.org/en/3.0/classes/class_meshinstance.html" target="_blank" rel="noopener">MeshInstance</a> which I use to generate a random mine with. I’ve attached a script to this node which generates a mesh and assigns it to the MeshInstance.<br>Using <a href="http://docs.godotengine.org/en/3.0/classes/class_surfacetool.html" target="_blank" rel="noopener">SurfaceTool</a>, you can create geometry by specifying the vertices individually.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Create a new SurfaceTool instance</span><br><span class="line">var st = SurfaceTool.new()</span><br><span class="line"></span><br><span class="line"># Begin specifying your vertices using primitive type of triangles. Every 3 vertices is a triangle.</span><br><span class="line">st.begin(Mesh.PRIMITIVE_TRIANGLES)</span><br><span class="line"></span><br><span class="line"># Half of a quad</span><br><span class="line">st.add_uv(Vector2(1,1))</span><br><span class="line">st.add_vertex(Vector3(0,0,1))</span><br><span class="line"></span><br><span class="line">st.add_uv(Vector2(1,0))</span><br><span class="line">st.add_vertex(Vector3(0,1,1))</span><br><span class="line"></span><br><span class="line">st.add_uv(Vector2(0,1))</span><br><span class="line">st.add_vertex(Vector3(1,0,1))</span><br><span class="line"></span><br><span class="line"># Output the mesh</span><br><span class="line">var mesh = st.commit()</span><br></pre></td></tr></table></figure></p><p>This is just a basic example of what you can do with SurfaceTool, but as you can see, it’s a great way to create procedural geometry. Alongside this I use some code to decide which material to use for which tile and the ability to regenerate the mesh when a tile is changed.</p><h2 id="The-Player"><a href="#The-Player" class="headerlink" title="The Player"></a>The Player</h2><p>The player is currently just a simple CapsuleMesh with a camera, a light, some raycasts and some sounds attached to it.</p><p><img src="https://i.lunasqu.ee/blog/player_scene.png" alt="Player Scene"><br>The script attached to it deals with <a href="http://docs.godotengine.org/en/3.0/classes/class_kinematicbody.html" target="_blank" rel="noopener">KinematicBody</a> movement and the block break animation. The RayCasts are used to determine whether the player is colliding with the chunk or not. The RayCast pointing up is used to cancel the jump when player hits a tile from below.</p><h2 id="The-GUI"><a href="#The-GUI" class="headerlink" title="The GUI"></a>The GUI</h2><p><img src="https://i.lunasqu.ee/blog/gui.png" alt="GUI Scene"><br>GUI in Godot is created using the <a href="http://docs.godotengine.org/en/3.0/classes/class_control.html" target="_blank" rel="noopener">Control</a> class and it’s inherited classes.<br>In the GUI scene I have a simple <a href="http://docs.godotengine.org/en/3.0/classes/class_itemlist.html" target="_blank" rel="noopener">ItemList</a> inventory and a few other items. The main thing the GUI does is the shop: buy and sell system.</p><p><img src="https://i.lunasqu.ee/blog/shop.png" alt="The Shop Dialog"></p><p>On the righthand side, there are two image buttons that spawn an instance of another scene and translate it to the player’s current position. These two buttons are Bomb and Torch, which “place” their respective item.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Load the scene</span><br><span class="line">var scene = load(&quot;res://scene/props/bomb.tscn&quot;)</span><br><span class="line"></span><br><span class="line"># Get the root instance of the scene, in this case it&apos;s a Spatial</span><br><span class="line">var node = scene.instance()</span><br><span class="line"></span><br><span class="line"># Translate the Spatial</span><br><span class="line">node.set_translation(Vector3(x, y, z))</span><br><span class="line"></span><br><span class="line"># Add it to the Root scene</span><br><span class="line">get_node(&quot;../&quot;).add_child(node)</span><br></pre></td></tr></table></figure></p><h2 id="SideSupport"><a href="#SideSupport" class="headerlink" title="SideSupport"></a>SideSupport</h2><p>This scene generates 4 quads that cover the chunk. These prevent the player from walking off of the chunk or falling out the bottom.</p><h2 id="CrackBox"><a href="#CrackBox" class="headerlink" title="CrackBox"></a>CrackBox</h2><p>This scene generates a quad that has a variable texture. This scene is used to display the breaking animation of a tile, by translating it to the currently “broken” tile and setting the Texture of the material to one of the 6 crack textures.<br><img src="https://i.lunasqu.ee/blog/crack.png" alt="The 6 textures used to represent the tile breaking"></p><h1 id="The-Source"><a href="#The-Source" class="headerlink" title="The Source"></a>The Source</h1><p>The source of this project is available <a href="https://github.com/LunaSquee/xyminer" target="_blank" rel="noopener">on my GitHub account</a>. I’ve laid out the scenes, scripts, etc. into a nice folder structure so you can easily see where the things are located. I recommend you do the same when you’re making a game in Godot. If you want to try the game yourself, you can clone or download the repository onto your computer and <strong>Import</strong> it in the project list of the editor. Downloads are not currently available as the game is still in development, but you can easily export them in the editor.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>I think that Godot is a really great game engine. It lets you do amazing things quite easily. The community is also very helpful and the <a href="http://docs.godotengine.org/en/3.0/" target="_blank" rel="noopener">documentation</a> is good enough for you to get started. This game still needs work for it to be enjoyable, but it’s been quite fun getting this far and I thought I’d share it with you.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello!&lt;br&gt;In the past week, I’ve been working on a simple 3D game using &lt;a href=&quot;https://godotengine.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
    
      <category term="game" scheme="https://lunasqu.ee/blog/tags/game/"/>
    
      <category term="projects" scheme="https://lunasqu.ee/blog/tags/projects/"/>
    
      <category term="godot" scheme="https://lunasqu.ee/blog/tags/godot/"/>
    
  </entry>
  
  <entry>
    <title>Welcome to my blog!</title>
    <link href="https://lunasqu.ee/blog/2018/01/26/welcome-to-my-blog/"/>
    <id>https://lunasqu.ee/blog/2018/01/26/welcome-to-my-blog/</id>
    <published>2018-01-26T10:00:00.000Z</published>
    <updated>2019-02-23T19:33:24.119Z</updated>
    
    <content type="html"><![CDATA[<p>So, I’ve decided to start a new blog using <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>.<br>I’ll probably be using this to share my projects and write some tutorials.</p><h2 id="Current-projects"><a href="#Current-projects" class="headerlink" title="Current projects"></a>Current projects</h2><p>I’m currently taking a break from writing code due to personal reasons, but I’m mainly working on my network, <a href="https://icynet.eu" target="_blank" rel="noopener">Icy Network</a>. The main project in the works is <a href="https://github.com/IcyNet/Episodes.Community" target="_blank" rel="noopener">Episodes.Community</a>, which is basically a site where people can watch and share links to their favorite TV shows and cartoons.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So, I’ve decided to start a new blog using &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;.&lt;br&gt;I’ll probably be using 
      
    
    </summary>
    
    
      <category term="projects" scheme="https://lunasqu.ee/blog/tags/projects/"/>
    
      <category term="update" scheme="https://lunasqu.ee/blog/tags/update/"/>
    
  </entry>
  
</feed>
